'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var getIfaceStation = exports.getIfaceStation = function getIfaceStation(api, sid, iface) {
  return new Promise(function (res, rej) {
    api.call(sid, 'get_iface_stations', { iface: iface }).map(function (data) {
      return Object.keys(data).map(function (key, index) {
        return data[key];
      }).reduce(function (x, y) {
        return x.concat(y);
      }, []);
    }).map(function (nodes) {
      return nodes.map(function (node) {
        if (node.signal) {
          node.signal = Number(node.signal);
        }
        return node;
      });
    }).map(function (nodes) {
      return { iface: iface, nodes: nodes };
    }).subscribe(function (x) {
      if (x.nodes.length > 0) {
        res(x);
      }
      rej(x);
    });
  });
};

var getStationSignal = exports.getStationSignal = function getStationSignal(api, sid, node) {
  return api.call(sid, 'get_station_signal', { station_mac: node.mac, iface: node.iface });
};

var getInterfaces = exports.getInterfaces = function getInterfaces(api, sid) {
  return api.call(sid, 'get_interfaces', {}).map(function (res) {
    return res.interfaces;
  }).map(function (iface) {
    return iface.map(function (x) {
      return { name: x };
    });
  });
};

var getStations = exports.getStations = function getStations(api, sid) {
  return new Promise(function (res, rej) {
    api.call(sid, 'get_stations', {}).map(function (x) {
      return x.stations;
    }).map(function (data) {
      return Object.keys(data).map(function (key, index) {
        return data[key];
      }).reduce(function (x, y) {
        return x.concat(y);
      }, []);
    }).map(function (y) {
      return y.reduce(function (a, b) {
        return a.concat(b);
      }, []);
    }).map(function (nodes) {
      return nodes.map(function (node) {
        node.signal = Number(node.signal);
        return node;
      });
    }).subscribe(function (x) {
      if (x.length > 0) {
        res(x);
      }
      rej(x);
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hbGlnbkFwaS5qcyJdLCJuYW1lcyI6WyJnZXRJZmFjZVN0YXRpb24iLCJhcGkiLCJzaWQiLCJpZmFjZSIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJjYWxsIiwibWFwIiwiT2JqZWN0Iiwia2V5cyIsImRhdGEiLCJrZXkiLCJpbmRleCIsInJlZHVjZSIsIngiLCJ5IiwiY29uY2F0Iiwibm9kZXMiLCJub2RlIiwic2lnbmFsIiwiTnVtYmVyIiwic3Vic2NyaWJlIiwibGVuZ3RoIiwiZ2V0U3RhdGlvblNpZ25hbCIsInN0YXRpb25fbWFjIiwibWFjIiwiZ2V0SW50ZXJmYWNlcyIsImludGVyZmFjZXMiLCJuYW1lIiwiZ2V0U3RhdGlvbnMiLCJzdGF0aW9ucyIsImEiLCJiIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQU1BLDRDQUFrQixTQUFsQkEsZUFBa0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDbEQsU0FBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsR0FBRCxFQUFLQyxHQUFMLEVBQWE7QUFDOUJMLFFBQUlNLElBQUosQ0FBU0wsR0FBVCxFQUFjLG9CQUFkLEVBQW9DLEVBQUVDLFlBQUYsRUFBcEMsRUFDR0ssR0FESCxDQUNPO0FBQUEsYUFBUUMsT0FBT0MsSUFBUCxDQUFZQyxJQUFaLEVBQWtCSCxHQUFsQixDQUFzQixVQUFDSSxHQUFELEVBQU1DLEtBQU47QUFBQSxlQUFjRixLQUFLQyxHQUFMLENBQWQ7QUFBQSxPQUF0QixFQUErQ0UsTUFBL0MsQ0FBc0QsVUFBQ0MsQ0FBRCxFQUFHQyxDQUFIO0FBQUEsZUFBU0QsRUFBRUUsTUFBRixDQUFTRCxDQUFULENBQVQ7QUFBQSxPQUF0RCxFQUE0RSxFQUE1RSxDQUFSO0FBQUEsS0FEUCxFQUVHUixHQUZILENBRU8sVUFBQ1UsS0FBRDtBQUFBLGFBQVdBLE1BQU1WLEdBQU4sQ0FBVSxnQkFBUTtBQUNoQyxZQUFJVyxLQUFLQyxNQUFULEVBQWlCO0FBQ2ZELGVBQUtDLE1BQUwsR0FBY0MsT0FBT0YsS0FBS0MsTUFBWixDQUFkO0FBQ0Q7QUFDRCxlQUFPRCxJQUFQO0FBQ0QsT0FMZSxDQUFYO0FBQUEsS0FGUCxFQVFHWCxHQVJILENBUU8sVUFBQ1UsS0FBRCxFQUFXO0FBQUUsYUFBTyxFQUFFZixZQUFGLEVBQVNlLFlBQVQsRUFBUDtBQUEwQixLQVI5QyxFQVNHSSxTQVRILENBU2MsYUFBSztBQUNmLFVBQUlQLEVBQUVHLEtBQUYsQ0FBUUssTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUFFbEIsWUFBSVUsQ0FBSjtBQUFTO0FBQ25DVCxVQUFJUyxDQUFKO0FBQ0QsS0FaSDtBQWFELEdBZE0sQ0FBUDtBQWVELENBaEJNOztBQWtCQSxJQUFNUyw4Q0FBbUIsU0FBbkJBLGdCQUFtQixDQUFDdkIsR0FBRCxFQUFNQyxHQUFOLEVBQVdpQixJQUFYLEVBQW9CO0FBQ2xELFNBQU9sQixJQUFJTSxJQUFKLENBQVNMLEdBQVQsRUFBYyxvQkFBZCxFQUFvQyxFQUFFdUIsYUFBYU4sS0FBS08sR0FBcEIsRUFBeUJ2QixPQUFPZ0IsS0FBS2hCLEtBQXJDLEVBQXBDLENBQVA7QUFDRCxDQUZNOztBQUlBLElBQU13Qix3Q0FBZ0IsU0FBaEJBLGFBQWdCLENBQUMxQixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN6QyxTQUFPRCxJQUFJTSxJQUFKLENBQVNMLEdBQVQsRUFBYyxnQkFBZCxFQUFnQyxFQUFoQyxFQUNKTSxHQURJLENBQ0E7QUFBQSxXQUFPSCxJQUFJdUIsVUFBWDtBQUFBLEdBREEsRUFFSnBCLEdBRkksQ0FFQTtBQUFBLFdBQVNMLE1BQU1LLEdBQU4sQ0FBVSxVQUFDTyxDQUFELEVBQU87QUFBRSxhQUFPLEVBQUVjLE1BQU1kLENBQVIsRUFBUDtBQUFxQixLQUF4QyxDQUFUO0FBQUEsR0FGQSxDQUFQO0FBR0QsQ0FKTTs7QUFNQSxJQUFNZSxvQ0FBYyxTQUFkQSxXQUFjLENBQUM3QixHQUFELEVBQUtDLEdBQUwsRUFBYTtBQUN0QyxTQUFPLElBQUlFLE9BQUosQ0FBWSxVQUFDQyxHQUFELEVBQUtDLEdBQUwsRUFBYTtBQUM5QkwsUUFBSU0sSUFBSixDQUFTTCxHQUFULEVBQWMsY0FBZCxFQUE4QixFQUE5QixFQUNHTSxHQURILENBQ087QUFBQSxhQUFLTyxFQUFFZ0IsUUFBUDtBQUFBLEtBRFAsRUFFR3ZCLEdBRkgsQ0FFTztBQUFBLGFBQVFDLE9BQU9DLElBQVAsQ0FBWUMsSUFBWixFQUFrQkgsR0FBbEIsQ0FBc0IsVUFBQ0ksR0FBRCxFQUFNQyxLQUFOO0FBQUEsZUFBY0YsS0FBS0MsR0FBTCxDQUFkO0FBQUEsT0FBdEIsRUFBK0NFLE1BQS9DLENBQXNELFVBQUNDLENBQUQsRUFBR0MsQ0FBSDtBQUFBLGVBQVNELEVBQUVFLE1BQUYsQ0FBU0QsQ0FBVCxDQUFUO0FBQUEsT0FBdEQsRUFBNEUsRUFBNUUsQ0FBUjtBQUFBLEtBRlAsRUFHR1IsR0FISCxDQUdPLFVBQUNRLENBQUQsRUFBTztBQUNWLGFBQU9BLEVBQUVGLE1BQUYsQ0FBUyxVQUFDa0IsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsZUFBVUQsRUFBRWYsTUFBRixDQUFTZ0IsQ0FBVCxDQUFWO0FBQUEsT0FBVCxFQUFnQyxFQUFoQyxDQUFQO0FBQ0QsS0FMSCxFQU1HekIsR0FOSCxDQU1PLFVBQUNVLEtBQUQ7QUFBQSxhQUFXQSxNQUFNVixHQUFOLENBQVUsZ0JBQVE7QUFDaENXLGFBQUtDLE1BQUwsR0FBY0MsT0FBT0YsS0FBS0MsTUFBWixDQUFkO0FBQ0EsZUFBT0QsSUFBUDtBQUNELE9BSGUsQ0FBWDtBQUFBLEtBTlAsRUFVR0csU0FWSCxDQVVjLGFBQUs7QUFDZixVQUFJUCxFQUFFUSxNQUFGLEdBQVcsQ0FBZixFQUFrQjtBQUFFbEIsWUFBSVUsQ0FBSjtBQUFTO0FBQzdCVCxVQUFJUyxDQUFKO0FBQ0QsS0FiSDtBQWNELEdBZk0sQ0FBUDtBQWdCRCxDQWpCTSIsImZpbGUiOiJhbGlnbkFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBnZXRJZmFjZVN0YXRpb24gPSAoYXBpLCBzaWQsIGlmYWNlKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLHJlaikgPT4ge1xuICAgIGFwaS5jYWxsKHNpZCwgJ2dldF9pZmFjZV9zdGF0aW9ucycsIHsgaWZhY2UgfSlcbiAgICAgIC5tYXAoZGF0YSA9PiBPYmplY3Qua2V5cyhkYXRhKS5tYXAoKGtleSwgaW5kZXgpPT5kYXRhW2tleV0pLnJlZHVjZSgoeCx5KSA9PiB4LmNvbmNhdCh5KSwgW10pKVxuICAgICAgLm1hcCgobm9kZXMpID0+IG5vZGVzLm1hcChub2RlID0+IHtcbiAgICAgICAgaWYgKG5vZGUuc2lnbmFsKSB7XG4gICAgICAgICAgbm9kZS5zaWduYWwgPSBOdW1iZXIobm9kZS5zaWduYWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfSkpXG4gICAgICAubWFwKChub2RlcykgPT4geyByZXR1cm4geyBpZmFjZSwgbm9kZXMgfTsgfSlcbiAgICAgIC5zdWJzY3JpYmUoIHggPT4ge1xuICAgICAgICBpZiAoeC5ub2Rlcy5sZW5ndGggPiAwKSB7IHJlcyh4KTsgfVxuICAgICAgICByZWooeCk7XG4gICAgICB9KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U3RhdGlvblNpZ25hbCA9IChhcGksIHNpZCwgbm9kZSkgPT4ge1xuICByZXR1cm4gYXBpLmNhbGwoc2lkLCAnZ2V0X3N0YXRpb25fc2lnbmFsJywgeyBzdGF0aW9uX21hYzogbm9kZS5tYWMsIGlmYWNlOiBub2RlLmlmYWNlIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEludGVyZmFjZXMgPSAoYXBpLCBzaWQpID0+IHtcbiAgcmV0dXJuIGFwaS5jYWxsKHNpZCwgJ2dldF9pbnRlcmZhY2VzJywge30pXG4gICAgLm1hcChyZXMgPT4gcmVzLmludGVyZmFjZXMpXG4gICAgLm1hcChpZmFjZSA9PiBpZmFjZS5tYXAoKHgpID0+IHsgcmV0dXJuIHsgbmFtZTogeCB9OyB9KSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U3RhdGlvbnMgPSAoYXBpLHNpZCkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcyxyZWopID0+IHtcbiAgICBhcGkuY2FsbChzaWQsICdnZXRfc3RhdGlvbnMnLCB7fSlcbiAgICAgIC5tYXAoeCA9PiB4LnN0YXRpb25zKVxuICAgICAgLm1hcChkYXRhID0+IE9iamVjdC5rZXlzKGRhdGEpLm1hcCgoa2V5LCBpbmRleCk9PmRhdGFba2V5XSkucmVkdWNlKCh4LHkpID0+IHguY29uY2F0KHkpLCBbXSkpXG4gICAgICAubWFwKCh5KSA9PiB7XG4gICAgICAgIHJldHVybiB5LnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYiksIFtdKTtcbiAgICAgIH0pXG4gICAgICAubWFwKChub2RlcykgPT4gbm9kZXMubWFwKG5vZGUgPT4ge1xuICAgICAgICBub2RlLnNpZ25hbCA9IE51bWJlcihub2RlLnNpZ25hbCk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfSkpXG4gICAgICAuc3Vic2NyaWJlKCB4ID0+IHtcbiAgICAgICAgaWYgKHgubGVuZ3RoID4gMCkgeyByZXMoeCk7IH1cbiAgICAgICAgcmVqKHgpO1xuICAgICAgfSk7XG4gIH0pO1xufTsiXX0=