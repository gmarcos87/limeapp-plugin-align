'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var getIfaceStation = exports.getIfaceStation = function getIfaceStation(api, sid, iface) {
  return api.call(sid, 'get_iface_stations', { iface: iface }).map(function (x) {
    return x.stations;
  }).map(function (data) {
    return Object.keys(data).map(function (key, index) {
      return data[key];
    }).reduce(function (x, y) {
      return x.concat(y);
    }, []);
  }).map(function (nodes) {
    return nodes.map(function (node) {
      if (node.signal) {
        node.signal = Number(node.signal);
      }
      return node;
    });
  }).map(function (nodes) {
    return { iface: iface, nodes: nodes };
  }).map(function (x) {
    if (x.nodes.length > 0) {
      return x;
    }
    throw new Error();
  });
};

var getStationSignal = exports.getStationSignal = function getStationSignal(api, sid, node) {
  return api.call(sid, 'get_station_signal', { station_mac: node.mac, iface: node.iface });
};

var getInterfaces = exports.getInterfaces = function getInterfaces(api, sid) {
  return api.call(sid, 'get_interfaces', {}).map(function (res) {
    return res.interfaces;
  }).map(function (iface) {
    return iface.map(function (x) {
      return { name: x };
    });
  });
};

var getStations = exports.getStations = function getStations(api, sid) {
  return new Promise(function (res, rej) {
    api.call(sid, 'get_stations', {}).map(function (x) {
      return x.stations;
    }).map(function (data) {
      return Object.keys(data).map(function (key, index) {
        return data[key];
      }).reduce(function (x, y) {
        return x.concat(y);
      }, []);
    }).map(function (y) {
      return y.reduce(function (a, b) {
        return a.concat(b);
      }, []);
    }).map(function (nodes) {
      return nodes.map(function (node) {
        node.signal = Number(node.signal);
        return node;
      });
    }).subscribe(function (x) {
      if (x.length > 0) {
        res(x);
      }
      rej(x);
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hbGlnbkFwaS5qcyJdLCJuYW1lcyI6WyJnZXRJZmFjZVN0YXRpb24iLCJhcGkiLCJzaWQiLCJpZmFjZSIsImNhbGwiLCJtYXAiLCJ4Iiwic3RhdGlvbnMiLCJPYmplY3QiLCJrZXlzIiwiZGF0YSIsImtleSIsImluZGV4IiwicmVkdWNlIiwieSIsImNvbmNhdCIsIm5vZGVzIiwibm9kZSIsInNpZ25hbCIsIk51bWJlciIsImxlbmd0aCIsIkVycm9yIiwiZ2V0U3RhdGlvblNpZ25hbCIsInN0YXRpb25fbWFjIiwibWFjIiwiZ2V0SW50ZXJmYWNlcyIsInJlcyIsImludGVyZmFjZXMiLCJuYW1lIiwiZ2V0U3RhdGlvbnMiLCJQcm9taXNlIiwicmVqIiwiYSIsImIiLCJzdWJzY3JpYmUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sSUFBTUEsNENBQWtCLFNBQWxCQSxlQUFrQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsS0FBWCxFQUFxQjtBQUNsRCxTQUFPRixJQUFJRyxJQUFKLENBQVNGLEdBQVQsRUFBYyxvQkFBZCxFQUFvQyxFQUFFQyxZQUFGLEVBQXBDLEVBQ0ZFLEdBREUsQ0FDRTtBQUFBLFdBQUtDLEVBQUVDLFFBQVA7QUFBQSxHQURGLEVBRUZGLEdBRkUsQ0FFRTtBQUFBLFdBQVFHLE9BQU9DLElBQVAsQ0FBWUMsSUFBWixFQUFrQkwsR0FBbEIsQ0FBc0IsVUFBQ00sR0FBRCxFQUFNQyxLQUFOO0FBQUEsYUFBY0YsS0FBS0MsR0FBTCxDQUFkO0FBQUEsS0FBdEIsRUFBK0NFLE1BQS9DLENBQXNELFVBQUNQLENBQUQsRUFBR1EsQ0FBSDtBQUFBLGFBQVNSLEVBQUVTLE1BQUYsQ0FBU0QsQ0FBVCxDQUFUO0FBQUEsS0FBdEQsRUFBNEUsRUFBNUUsQ0FBUjtBQUFBLEdBRkYsRUFHRlQsR0FIRSxDQUdFLFVBQUNXLEtBQUQ7QUFBQSxXQUFXQSxNQUFNWCxHQUFOLENBQVUsZ0JBQVE7QUFDaEMsVUFBSVksS0FBS0MsTUFBVCxFQUFpQjtBQUNmRCxhQUFLQyxNQUFMLEdBQWNDLE9BQU9GLEtBQUtDLE1BQVosQ0FBZDtBQUNEO0FBQ0QsYUFBT0QsSUFBUDtBQUNELEtBTGUsQ0FBWDtBQUFBLEdBSEYsRUFTRlosR0FURSxDQVNFLFVBQUNXLEtBQUQsRUFBVztBQUFFLFdBQU8sRUFBRWIsWUFBRixFQUFTYSxZQUFULEVBQVA7QUFBMEIsR0FUekMsRUFVRlgsR0FWRSxDQVVHLGFBQUs7QUFDVCxRQUFJQyxFQUFFVSxLQUFGLENBQVFJLE1BQVIsR0FBaUIsQ0FBckIsRUFBd0I7QUFBRSxhQUFPZCxDQUFQO0FBQVc7QUFDckMsVUFBTSxJQUFJZSxLQUFKLEVBQU47QUFDRCxHQWJFLENBQVA7QUFjRCxDQWZNOztBQWlCQSxJQUFNQyw4Q0FBbUIsU0FBbkJBLGdCQUFtQixDQUFDckIsR0FBRCxFQUFNQyxHQUFOLEVBQVdlLElBQVgsRUFBb0I7QUFDbEQsU0FBT2hCLElBQUlHLElBQUosQ0FBU0YsR0FBVCxFQUFjLG9CQUFkLEVBQW9DLEVBQUVxQixhQUFhTixLQUFLTyxHQUFwQixFQUF5QnJCLE9BQU9jLEtBQUtkLEtBQXJDLEVBQXBDLENBQVA7QUFDRCxDQUZNOztBQUlBLElBQU1zQix3Q0FBZ0IsU0FBaEJBLGFBQWdCLENBQUN4QixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN6QyxTQUFPRCxJQUFJRyxJQUFKLENBQVNGLEdBQVQsRUFBYyxnQkFBZCxFQUFnQyxFQUFoQyxFQUNKRyxHQURJLENBQ0E7QUFBQSxXQUFPcUIsSUFBSUMsVUFBWDtBQUFBLEdBREEsRUFFSnRCLEdBRkksQ0FFQTtBQUFBLFdBQVNGLE1BQU1FLEdBQU4sQ0FBVSxVQUFDQyxDQUFELEVBQU87QUFBRSxhQUFPLEVBQUVzQixNQUFNdEIsQ0FBUixFQUFQO0FBQXFCLEtBQXhDLENBQVQ7QUFBQSxHQUZBLENBQVA7QUFHRCxDQUpNOztBQU1BLElBQU11QixvQ0FBYyxTQUFkQSxXQUFjLENBQUM1QixHQUFELEVBQUtDLEdBQUwsRUFBYTtBQUN0QyxTQUFPLElBQUk0QixPQUFKLENBQVksVUFBQ0osR0FBRCxFQUFLSyxHQUFMLEVBQWE7QUFDOUI5QixRQUFJRyxJQUFKLENBQVNGLEdBQVQsRUFBYyxjQUFkLEVBQThCLEVBQTlCLEVBQ0dHLEdBREgsQ0FDTztBQUFBLGFBQUtDLEVBQUVDLFFBQVA7QUFBQSxLQURQLEVBRUdGLEdBRkgsQ0FFTztBQUFBLGFBQVFHLE9BQU9DLElBQVAsQ0FBWUMsSUFBWixFQUFrQkwsR0FBbEIsQ0FBc0IsVUFBQ00sR0FBRCxFQUFNQyxLQUFOO0FBQUEsZUFBY0YsS0FBS0MsR0FBTCxDQUFkO0FBQUEsT0FBdEIsRUFBK0NFLE1BQS9DLENBQXNELFVBQUNQLENBQUQsRUFBR1EsQ0FBSDtBQUFBLGVBQVNSLEVBQUVTLE1BQUYsQ0FBU0QsQ0FBVCxDQUFUO0FBQUEsT0FBdEQsRUFBNEUsRUFBNUUsQ0FBUjtBQUFBLEtBRlAsRUFHR1QsR0FISCxDQUdPLFVBQUNTLENBQUQsRUFBTztBQUNWLGFBQU9BLEVBQUVELE1BQUYsQ0FBUyxVQUFDbUIsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsZUFBVUQsRUFBRWpCLE1BQUYsQ0FBU2tCLENBQVQsQ0FBVjtBQUFBLE9BQVQsRUFBZ0MsRUFBaEMsQ0FBUDtBQUNELEtBTEgsRUFNRzVCLEdBTkgsQ0FNTyxVQUFDVyxLQUFEO0FBQUEsYUFBV0EsTUFBTVgsR0FBTixDQUFVLGdCQUFRO0FBQ2hDWSxhQUFLQyxNQUFMLEdBQWNDLE9BQU9GLEtBQUtDLE1BQVosQ0FBZDtBQUNBLGVBQU9ELElBQVA7QUFDRCxPQUhlLENBQVg7QUFBQSxLQU5QLEVBVUdpQixTQVZILENBVWMsYUFBSztBQUNmLFVBQUk1QixFQUFFYyxNQUFGLEdBQVcsQ0FBZixFQUFrQjtBQUFFTSxZQUFJcEIsQ0FBSjtBQUFTO0FBQzdCeUIsVUFBSXpCLENBQUo7QUFDRCxLQWJIO0FBY0QsR0FmTSxDQUFQO0FBZ0JELENBakJNIiwiZmlsZSI6ImFsaWduQXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGdldElmYWNlU3RhdGlvbiA9IChhcGksIHNpZCwgaWZhY2UpID0+IHtcbiAgcmV0dXJuIGFwaS5jYWxsKHNpZCwgJ2dldF9pZmFjZV9zdGF0aW9ucycsIHsgaWZhY2UgfSlcbiAgICAgIC5tYXAoeCA9PiB4LnN0YXRpb25zKVxuICAgICAgLm1hcChkYXRhID0+IE9iamVjdC5rZXlzKGRhdGEpLm1hcCgoa2V5LCBpbmRleCk9PmRhdGFba2V5XSkucmVkdWNlKCh4LHkpID0+IHguY29uY2F0KHkpLCBbXSkpXG4gICAgICAubWFwKChub2RlcykgPT4gbm9kZXMubWFwKG5vZGUgPT4ge1xuICAgICAgICBpZiAobm9kZS5zaWduYWwpIHtcbiAgICAgICAgICBub2RlLnNpZ25hbCA9IE51bWJlcihub2RlLnNpZ25hbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9KSlcbiAgICAgIC5tYXAoKG5vZGVzKSA9PiB7IHJldHVybiB7IGlmYWNlLCBub2RlcyB9OyB9KVxuICAgICAgLm1hcCggeCA9PiB7XG4gICAgICAgIGlmICh4Lm5vZGVzLmxlbmd0aCA+IDApIHsgcmV0dXJuIHg7IH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aW9uU2lnbmFsID0gKGFwaSwgc2lkLCBub2RlKSA9PiB7XG4gIHJldHVybiBhcGkuY2FsbChzaWQsICdnZXRfc3RhdGlvbl9zaWduYWwnLCB7IHN0YXRpb25fbWFjOiBub2RlLm1hYywgaWZhY2U6IG5vZGUuaWZhY2UgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SW50ZXJmYWNlcyA9IChhcGksIHNpZCkgPT4ge1xuICByZXR1cm4gYXBpLmNhbGwoc2lkLCAnZ2V0X2ludGVyZmFjZXMnLCB7fSlcbiAgICAubWFwKHJlcyA9PiByZXMuaW50ZXJmYWNlcylcbiAgICAubWFwKGlmYWNlID0+IGlmYWNlLm1hcCgoeCkgPT4geyByZXR1cm4geyBuYW1lOiB4IH07IH0pKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aW9ucyA9IChhcGksc2lkKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLHJlaikgPT4ge1xuICAgIGFwaS5jYWxsKHNpZCwgJ2dldF9zdGF0aW9ucycsIHt9KVxuICAgICAgLm1hcCh4ID0+IHguc3RhdGlvbnMpXG4gICAgICAubWFwKGRhdGEgPT4gT2JqZWN0LmtleXMoZGF0YSkubWFwKChrZXksIGluZGV4KT0+ZGF0YVtrZXldKS5yZWR1Y2UoKHgseSkgPT4geC5jb25jYXQoeSksIFtdKSlcbiAgICAgIC5tYXAoKHkpID0+IHtcbiAgICAgICAgcmV0dXJuIHkucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChiKSwgW10pO1xuICAgICAgfSlcbiAgICAgIC5tYXAoKG5vZGVzKSA9PiBub2Rlcy5tYXAobm9kZSA9PiB7XG4gICAgICAgIG5vZGUuc2lnbmFsID0gTnVtYmVyKG5vZGUuc2lnbmFsKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9KSlcbiAgICAgIC5zdWJzY3JpYmUoIHggPT4ge1xuICAgICAgICBpZiAoeC5sZW5ndGggPiAwKSB7IHJlcyh4KTsgfVxuICAgICAgICByZWooeCk7XG4gICAgICB9KTtcbiAgfSk7XG59OyJdfQ==