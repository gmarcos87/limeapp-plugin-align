'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _alignApi = require('./alignApi');

var _Observable = require('rxjs/Observable');

require('rxjs/add/observable/from');

require('rxjs/add/observable/of');

require('rxjs/add/observable/interval');

require('rxjs/add/operator/takeUntil');

require('rxjs/add/operator/mergeMap');

require('rxjs/add/operator/switchMap');

require('rxjs/add/operator/mapTo');

require('rxjs/add/operator/map');

require('rxjs/add/operator/catch');

var _alignConstants = require('./alignConstants');

// LOAD INTERFACES -> Dispatch success and stations loads
var ifaceLoad = function ifaceLoad(action$, _ref, _ref2) {
  var getState = _ref.getState;
  var wsAPI = _ref2.wsAPI;
  return action$.ofType.apply(action$, [_alignConstants.IFACES_LOAD]).mergeMap(function (action) {
    return (0, _alignApi.getInterfaces)(wsAPI, getState().meta.sid);
  }).mergeMap(function (payload) {
    return _Observable.Observable.from([{ type: _alignConstants.IFACES_LOAD_SUCCESS, payload: payload }, { type: _alignConstants.STATIONS_LOAD }]);
  });
};

// LOAD ALL STATIONS -> Dispatch success and Init Align
var allStationsLoad = function allStationsLoad(action$, _ref3, _ref4) {
  var getState = _ref3.getState;
  var wsAPI = _ref4.wsAPI;
  return action$.ofType(_alignConstants.STATIONS_LOAD).mergeMap(function () {
    return (0, _alignApi.getStations)(wsAPI, getState().meta.sid);
  }).map(function (payload) {
    return { type: _alignConstants.STATIONS_LOAD_SUCCESS, payload: payload };
  }).catch(function (error) {
    return [{
      type: 'NOTIFICATION',
      payload: { msg: 'Not stations in interfaces', error: error }
    }];
  });
};

// CHANGE INTEFACE -> DIspatch get station by interface and select best signal
var ifaceChange = function ifaceChange(action$, _ref5, _ref6) {
  var getState = _ref5.getState;
  var wsAPI = _ref6.wsAPI;
  return action$.ofType(_alignConstants.IFACE_CHANGE).mergeMap(function (action) {
    return (0, _alignApi.getIfaceStation)(wsAPI, getState().meta.sid, action.payload.iface).map(function (payload) {
      return { type: _alignConstants.STATIONS_LOAD_SUCCESS, payload: payload.nodes };
    }).catch(function (error) {
      return [{
        type: 'NOTIFICATION',
        payload: { msg: 'Not stations in interface', error: error }
      }];
    });
  });
};

// INIT ALIGN -> Select best node, interface and start timer
var initAlign = function initAlign(action$, _ref7) {
  var getState = _ref7.getState;
  return action$.ofType(_alignConstants.STATIONS_LOAD_SUCCESS).map(function (action) {
    return action.payload;
  }).map(function (payload) {
    //Select most active node as default
    if (typeof getState().rx.data.most_active !== 'undefined') {
      if (payload.filter(function (x) {
        return x.mac === getState().rx.data.most_active.mac;
      }).length > 0) {
        return payload.filter(function (x) {
          return x.mac === getState().rx.data.most_active.mac;
        })[0];
      }
    }
    //Or select best node if not found most active node.
    return payload.sort(function (x, y) {
      return x.signal + y.signal;
    })[0];
  }).mergeMap(function (res) {
    return _Observable.Observable.from([{ type: _alignConstants.STATION_SET, payload: res }, { type: _alignConstants.IFACE_SET, payload: res.iface }, { type: _alignConstants.TIMER_START }]);
  });
};

// GET_SIGNAL -> Update current signal and nodes
var getSignal = function getSignal(action$, _ref8, _ref9) {
  var getState = _ref8.getState;
  var wsAPI = _ref9.wsAPI;
  return action$.ofType(_alignConstants.SIGNAL_GET).switchMap(function () {
    return (0, _alignApi.getStationSignal)(wsAPI, getState().meta.sid, getState().align.currentReading);
  }).map(function (signal) {
    return { type: _alignConstants.SIGNAL_GET_SUCCESS, payload: signal };
  });
};

// TIMER MANAGER
var runTimer = function runTimer(action$, _ref10) {
  var getState = _ref10.getState;
  return action$.ofType(_alignConstants.TIMER_START).mergeMap(function (actions) {
    return _Observable.Observable.interval(getState().meta.interval).takeUntil(action$.ofType(_alignConstants.TIMER_STOP)).map(function () {
      return { type: _alignConstants.SIGNAL_GET };
    });
  });
};

exports.default = { ifaceLoad: ifaceLoad, allStationsLoad: allStationsLoad, ifaceChange: ifaceChange, initAlign: initAlign, getSignal: getSignal, runTimer: runTimer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,